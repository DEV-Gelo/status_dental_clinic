generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  firstName    String
  lastName     String
  patronymic   String?      // optional field
  email        String       @unique
  phone        String       @unique
  photo        String?
  role         String
  specialization    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  schedules    Schedule[]   
  patientAppointments Appointment[] @relation("UserAppointments") 
  doctorAppointments Appointment[] @relation("DoctorAppointments")
}

enum Role {
  User
  Doctor
}

model Slot {
  id           Int       @id @default(autoincrement())
  time         String    
  isBooked     Boolean   @default(false) 

  schedule     Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   Int       

  appointment  Appointment? @relation("SlotAppointments", fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int?  

  @@unique([appointmentId]) // Використання унікального індексу замість @unique
}

model Schedule {
  id           Int          @id @default(autoincrement())
  date         DateTime
  doctor       User         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  appointments Appointment[] 
  slots        Slot[]        
}

model Appointment {
  id           Int          @id @default(autoincrement())
  firstName    String
  lastName     String
  patronymic   String?      // optional field
  email        String
  phone        String
  service      String
  time         String
  date         DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  schedule     Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   Int

  user         User         @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade) 
  userId       Int

  doctor       User         @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade) 
  doctorId     Int

  slotId       Int?         
  slot         Slot?        @relation("SlotAppointments") 
}

model Services {
  id           Int          @id @default(autoincrement())
  name         String       
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Category {
  id           Int          @id @default(autoincrement())
  name         String       
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  pricings     Pricing[] 
}

model Pricing {
  id           Int          @id @default(autoincrement())
  name         String       
  price        Decimal
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  category     Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int          
}
